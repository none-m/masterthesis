main = "Immune therapy (On-therapy vs. Pre-therapy)"
disDEG_ori_all <- readRDS("/Users/manon/Desktop/リアルデータ解析/Immunodata/original_analysis/test3/discoveryDEG_ori.obj")
# ある1試行の検出DEG数をデータフレームにまとめる
disDEG_ori <- disDEG_ori_all[[9]] #データ順に1,9,6,1行目
nDEG_ori <- data.frame(edgeR = length(disDEG_ori$edgeR),
DESeq2 = length(disDEG_ori$DESeq2),
TCC = length(disDEG_ori$TCC),
MBCdeg1_K2 = length(disDEG_ori$MBCdeg1$K2),
MBCdeg1_K3 = length(disDEG_ori$MBCdeg1$K3),
MBCdeg1_K4 = length(disDEG_ori$MBCdeg1$K4),
MBCdeg1_K5 = length(disDEG_ori$MBCdeg1$K5),
MBCdeg2_K2 = length(disDEG_ori$MBCdeg2$K2),
MBCdeg2_K3 = length(disDEG_ori$MBCdeg2$K3),
MBCdeg2_K4 = length(disDEG_ori$MBCdeg2$K4),
MBCdeg2_K5 = length(disDEG_ori$MBCdeg2$K5),
MBCdeg3_K2 = length(disDEG_ori$MBCdeg3$K2),
MBCdeg3_K3 = length(disDEG_ori$MBCdeg3$K3),
MBCdeg3_K4 = length(disDEG_ori$MBCdeg3$K4),
MBCdeg3_K5 = length(disDEG_ori$MBCdeg3$K5))
max(nDEG_ori)
### 検出DEG数を棒グラフに図示
par(mar=c(6,4,3,1))
barplot(as.vector(as.matrix(nDEG_ori)),
names.arg = colnames(nDEG_ori),
main= main,
col=c("#8a2be2","#cd853f","#696969",rep("#FF367F",4),rep("#4689FF",4),rep("#009900",4)),
#ylab = "Gene Intersections",
ylim = c(0,25000), #(14000,2500,6000,50000)
xaxt = "n",
#width=0.4,
border = TRUE,
las = 2,
cex.names = 0.8,
font = 2) #(600,400)で保存
barplot(as.vector(as.matrix(nDEG_ori)),
names.arg = colnames(nDEG_ori),
main= main,
col=c("#8a2be2","#cd853f","#696969",rep("#FF367F",4),rep("#4689FF",4),rep("#009900",4)),
#ylab = "Gene Intersections",
ylim = c(0,2500), #(14000,2500,6000,50000)
xaxt = "n",
#width=0.4,
border = TRUE,
las = 2,
cex.names = 0.8,
font = 2) #(600,400)で保存
axis(side = 1, at = c(4.3,5.4,6.6,7.8,9,10.2,11.4,12.6,13.8,15,16.2,17.4),labels = rep(c("K = 2","K = 3","K = 4","K = 5"),3),font = 2,las=2)
# pickrell
main = "Lymphoblastoid cell lines (Female vs. Male)"
disDEG_ori_all <- readRDS("/Users/manon/Desktop/リアルデータ解析/Pickrell/original_analysis/discoveryDEG_ori_Ntri10_p.obj")
# ある1試行の検出DEG数をデータフレームにまとめる
disDEG_ori <- disDEG_ori_all[6]] #データ順に1,9,6,1行目
nDEG_ori <- data.frame(edgeR = length(disDEG_ori$edgeR),
DESeq2 = length(disDEG_ori$DESeq2),
TCC = length(disDEG_ori$TCC),
MBCdeg1_K2 = length(disDEG_ori$MBCdeg1$K2),
MBCdeg1_K3 = length(disDEG_ori$MBCdeg1$K3),
MBCdeg1_K4 = length(disDEG_ori$MBCdeg1$K4),
MBCdeg1_K5 = length(disDEG_ori$MBCdeg1$K5),
MBCdeg2_K2 = length(disDEG_ori$MBCdeg2$K2),
MBCdeg2_K3 = length(disDEG_ori$MBCdeg2$K3),
MBCdeg2_K4 = length(disDEG_ori$MBCdeg2$K4),
MBCdeg2_K5 = length(disDEG_ori$MBCdeg2$K5),
MBCdeg3_K2 = length(disDEG_ori$MBCdeg3$K2),
MBCdeg3_K3 = length(disDEG_ori$MBCdeg3$K3),
MBCdeg3_K4 = length(disDEG_ori$MBCdeg3$K4),
MBCdeg3_K5 = length(disDEG_ori$MBCdeg3$K5))
max(nDEG_ori)
### 検出DEG数を棒グラフに図示
par(mar=c(6,4,3,1))
barplot(as.vector(as.matrix(nDEG_ori)),
names.arg = colnames(nDEG_ori),
main= main,
col=c("#8a2be2","#cd853f","#696969",rep("#FF367F",4),rep("#4689FF",4),rep("#009900",4)),
#ylab = "Gene Intersections",
ylim = c(0,6000), #(14000,2500,6000,50000)
xaxt = "n",
#width=0.4,
border = TRUE,
las = 2,
cex.names = 0.8,
font = 2) #(600,400)で保存
axis(side = 1, at = c(4.3,5.4,6.6,7.8,9,10.2,11.4,12.6,13.8,15,16.2,17.4),labels = rep(c("K = 2","K = 3","K = 4","K = 5"),3),font = 2,las=2)
# pickrell
main = "Lymphoblastoid cell lines (Female vs. Male)"
disDEG_ori_all <- readRDS("/Users/manon/Desktop/リアルデータ解析/Pickrell/original_analysis/discoveryDEG_ori_Ntri10_p.obj")
# ある1試行の検出DEG数をデータフレームにまとめる
disDEG_ori <- disDEG_ori_all[[6]] #データ順に1,9,6,1行目
nDEG_ori <- data.frame(edgeR = length(disDEG_ori$edgeR),
DESeq2 = length(disDEG_ori$DESeq2),
TCC = length(disDEG_ori$TCC),
MBCdeg1_K2 = length(disDEG_ori$MBCdeg1$K2),
MBCdeg1_K3 = length(disDEG_ori$MBCdeg1$K3),
MBCdeg1_K4 = length(disDEG_ori$MBCdeg1$K4),
MBCdeg1_K5 = length(disDEG_ori$MBCdeg1$K5),
MBCdeg2_K2 = length(disDEG_ori$MBCdeg2$K2),
MBCdeg2_K3 = length(disDEG_ori$MBCdeg2$K3),
MBCdeg2_K4 = length(disDEG_ori$MBCdeg2$K4),
MBCdeg2_K5 = length(disDEG_ori$MBCdeg2$K5),
MBCdeg3_K2 = length(disDEG_ori$MBCdeg3$K2),
MBCdeg3_K3 = length(disDEG_ori$MBCdeg3$K3),
MBCdeg3_K4 = length(disDEG_ori$MBCdeg3$K4),
MBCdeg3_K5 = length(disDEG_ori$MBCdeg3$K5))
max(nDEG_ori)
### 検出DEG数を棒グラフに図示
par(mar=c(6,4,3,1))
barplot(as.vector(as.matrix(nDEG_ori)),
names.arg = colnames(nDEG_ori),
main= main,
col=c("#8a2be2","#cd853f","#696969",rep("#FF367F",4),rep("#4689FF",4),rep("#009900",4)),
#ylab = "Gene Intersections",
ylim = c(0,6000), #(14000,2500,6000,50000)
xaxt = "n",
#width=0.4,
border = TRUE,
las = 2,
cex.names = 0.8,
font = 2) #(600,400)で保存
axis(side = 1, at = c(4.3,5.4,6.6,7.8,9,10.2,11.4,12.6,13.8,15,16.2,17.4),labels = rep(c("K = 2","K = 3","K = 4","K = 5"),3),font = 2,las=2)
# Li
main = "Skin biopsies (lesional psoriatic vs. normal skin)"
disDEG_ori_all <- readRDS("/Users/manon/Desktop/リアルデータ解析/Li/original_analysis/discoveryDEG_ori_Ntri10_l.obj")
# ある1試行の検出DEG数をデータフレームにまとめる
disDEG_ori <- disDEG_ori_all[[1]] #データ順に1,9,6,1行目
nDEG_ori <- data.frame(edgeR = length(disDEG_ori$edgeR),
DESeq2 = length(disDEG_ori$DESeq2),
TCC = length(disDEG_ori$TCC),
MBCdeg1_K2 = length(disDEG_ori$MBCdeg1$K2),
MBCdeg1_K3 = length(disDEG_ori$MBCdeg1$K3),
MBCdeg1_K4 = length(disDEG_ori$MBCdeg1$K4),
MBCdeg1_K5 = length(disDEG_ori$MBCdeg1$K5),
MBCdeg2_K2 = length(disDEG_ori$MBCdeg2$K2),
MBCdeg2_K3 = length(disDEG_ori$MBCdeg2$K3),
MBCdeg2_K4 = length(disDEG_ori$MBCdeg2$K4),
MBCdeg2_K5 = length(disDEG_ori$MBCdeg2$K5),
MBCdeg3_K2 = length(disDEG_ori$MBCdeg3$K2),
MBCdeg3_K3 = length(disDEG_ori$MBCdeg3$K3),
MBCdeg3_K4 = length(disDEG_ori$MBCdeg3$K4),
MBCdeg3_K5 = length(disDEG_ori$MBCdeg3$K5))
max(nDEG_ori)
### 検出DEG数を棒グラフに図示
par(mar=c(6,4,3,1))
barplot(as.vector(as.matrix(nDEG_ori)),
names.arg = colnames(nDEG_ori),
main= main,
col=c("#8a2be2","#cd853f","#696969",rep("#FF367F",4),rep("#4689FF",4),rep("#009900",4)),
#ylab = "Gene Intersections",
ylim = c(0,50000), #(14000,2500,6000,50000)
xaxt = "n",
#width=0.4,
border = TRUE,
las = 2,
cex.names = 0.8,
font = 2) #(600,400)で保存
axis(side = 1, at = c(4.3,5.4,6.6,7.8,9,10.2,11.4,12.6,13.8,15,16.2,17.4),labels = rep(c("K = 2","K = 3","K = 4","K = 5"),3),font = 2,las=2)
setwd("~/Desktop/github/simdata_analysis/creating_simdata")
# Loading scripts
source("../../param.R")
source("../../package.R")
# Setting parameters
G <- param$g
PDEG <- param$pdeg[[1]]
assign <- param$assign$`2group`[[1]]
P1 <- assign[1]
P2 <- assign[2]
FC <- param$fc
n1 <- n2 <- param$rep[[1]]
data.name <- param$simdata.name
# setting parameters
## manual setting
PDEG <- param$pdeg[[1]]
assign <- param$assign$`2group`[[1]]
n1 <- n2 <- param$rep[[1]]
## fixed setting
G <- param$g
FC <- param$fc
data.name <- param$simdata.name
P1 <- assign[1]
P2 <- assign[2]
PDEG
# loading scripts
source("../../param.R")
source("../../package.R")
# setting parameters
## manual setting
PDEG <- param$pdeg[[1]]
assign <- param$assign$`2group`[[1]]
n1 <- n2 <- param$rep[[1]]
## fixed setting
G <- param$g
FC <- param$fc
data.name <- param$simdata.name
P1 <- assign[1]
P2 <- assign[2]
# Generating simulated data
## Preparation
simdata <- list()
N_trial <- param$tri[[1]]
N_trial <- 1
## main loop
### TCC data
N_trial <- 100
for (i in 1:N_trial){
print(i)
set.seed(i)
tcc <- simulateReadCounts(Ngene = G,
PDEG = PDEG,
DEG.assign= assign,
DEG.foldchange = c(FC,FC),
replicates = c(n1,n2))
simdata[[data.name[1]]][[i]] <- tcc
}
### compcodeR data
N_trial <- 50
for (i in 1:N_trial){
print(i)
set.seed(i)
compData <- generateSyntheticData(dataset = "compData",
n.vars = G,
samples.per.cond = n1,
n.diffexp = PDEG*G,
fraction.upregulated = P2,
filter.threshold.total = 1,
filter.threshold.mediancpm = 0)
simdata[[data.name[2]]][[i]] <- compData
}
source("../../package.R")
### compcodeR data
N_trial <- 50
for (i in 1:N_trial){
print(i)
set.seed(i)
compData <- generateSyntheticData(dataset = "compData",
n.vars = G,
samples.per.cond = n1,
n.diffexp = PDEG*G,
fraction.upregulated = P2,
filter.threshold.total = 1,
filter.threshold.mediancpm = 0)
simdata[[data.name[2]]][[i]] <- compData
}
# Loading scripts
source("../../param.R")
source("../../package.R")
### compcodeR data
N_trial <- 50
for (i in 1:N_trial){
print(i)
set.seed(i)
compData <- generateSyntheticData(dataset = "compData",
n.vars = G,
samples.per.cond = n1,
n.diffexp = PDEG*G,
fraction.upregulated = P2,
filter.threshold.total = 1,
filter.threshold.mediancpm = 0)
simdata[[data.name[2]]][[i]] <- compData
}
### PROPER data
N_trial <- 50
for (i in 1:N_trial){
print(i)
set.seed(i)
simOpts <- RNAseq.SimOptions.2grp(ngenes = G,
p.DE = PDEG,
lfc = c(rep(FC,G*PDEG*P1),rep(-FC,G*PDEG*P2)),
lBaselineExpr="bottomly",
lOD="bottomly",
sim.seed=1)
simres <- simRNAseq(simOpts,n1,n2)
colnames(simres$counts) <- c(paste('G1_rep',1:n1,sep=''),paste('G2_rep',1:n2,sep=''))
rownames(simres$counts) <- paste("Gene_",1:G,sep="")
simdata[[data.name[3]]][[i]] <- simres
}
# Output
out_f <- paste("../simdata_2group_",PDEG,"_",P1,"_n",n1,".obj",sep="")
saveRDS(simdata,out_f)
setwd("~/Desktop/修論script/simdata_analysis/creating_simdata")
# Loading scripts
source("../../param.R")
source("../../package.R")
# Setting parameters
## fixed setting
G <- param$g
FC <- param$fc
data.name <- param$simdata.name
data.name <- param$simdata.name
name <- data.name[1]
## manual setting
PDEG <- param$pdeg[[1]]
assign <- param$assign$`2group`[[1]]
P1 <- assign[1]
P2 <- assign[2]
n1 <- n2 <- param$rep[[1]]
param$tri
## main loop
### TCC data
N_trial <- 100
# Generating simulated data
## preparation
simdata <- list()
for (i in 1:N_trial){
print(i)
set.seed(i)
fc.matrix <- makeFCMatrix(Ngene=G,
PDEG=PDEG,
DEG.assign=c(P1, 1-P1),
replicates=c(n1, n2))
tcc <- simulateReadCounts(Ngene=G,
PDEG=PDEG,
DEG.assign=c(P1,1-P1),
DEG.foldchange = c(FC,FC),
fc.matrix=fc.matrix,
replicates = c(n1,n2))
simdata[[name]][[i]] <- tcc
}
# Output
out_f <- paste("../simdata_2group_fc_",name,"_",PDEG,"_",P1,"_n",n1,".obj",sep="")
saveRDS(simdata,out_f)
# Setting parameters
G <- param$g
PDEG <- param$pdeg[[1]]
assign <- param$assign$`3group`[[1]]
P1 <- assign[1]
P2 <- assign[2]
P3 <- assign[3]
FC <- param$fc
n1 <- n2 <- n3 <- param$rep[[1]]
data.name <- param$simdata.name
name <- data.name[1]
# Generating simulated data
## Preparation
simdata <- list()
## main loop
### TCC data
N_trial <- 50
for (i in 1:N_trial){
print(i)
set.seed(i)
tcc<-simulateReadCounts(Ngene=G,
PDEG=PDEG,
DEG.assign=c(P1, P2, P3),
replicates=c(n1, n2, n3),
DEG.foldchange=c(FC,FC,FC))
simdata[[name]][[i]] <- tcc
}
# Output
out_f <- paste("../simdata_3group_",name,"_",PDEG,"_",P1,"_n",n1,".obj",sep="")
saveRDS(simdata,out_f)
setwd("~/Desktop/github/simdata_analysis/test")
# Loading scripts
source("../../param.R")
source("../../package.R")
source("../../pipeline.R")
# Setting parameters
## fixed setting
G <- param$g
q <- param$q
data.name <- param$simdata.name
name <- data.name[1]
## manual setting
PDEG <- param$pdeg[[1]]
assign <- param$assign$`2group`[[1]]
P1 <- assign[1]
P2 <- assign[2]
n1 <- n2 <- param$rep[[1]]
k.list <- param$k[[3]]
getwd()
setwd("~/Desktop/github/simdata_analysis/creating_simdata")
simdata
# Output
out_f <- paste("../simdata_3group_",name,"_",PDEG,"_",P1,"_n",n1,".obj",sep="")
saveRDS(simdata,out_f)
# Loading data
in_f <- paste("../simdata_2group_",PDEG,"_",P1,"_n",n1,".obj",sep="")
data.all <- readRDS(in_f)
k.list
k.list <- 3
## main loop
N_trial <- 1
for (i in 1:N_trial){
print(i)
if (name == "tcc"){
data <- data.all[[name]][[i]]$count
data.cl <- data.all[[name]][[i]]$group$group
obj <- as.numeric(data.all[[name]][[i]]$simulation$trueDEG != 0)
}else if (name == "comp"){
data <- data.all[[name]][[i]]@count.matrix
data.cl <- data.all[[name]][[i]]@sample.annotations$condition
obj <- data.all[[name]][[i]]@variable.annotations$differential.expression
}else if (name == "pro"){
data <- data.all[[name]][[i]]$counts
data.cl <- data.all[[name]][[i]]$designs
obj <- rep(0,nrow(data))
for (d in data.all[[name]][[i]]$DEid){
obj[d] <- 1
}
}
### edgeR
res.list$edgeR[[i]] <- my.edger(data,data.cl)
### DESeq2
res.list$DESeq2[[i]] <- my.deseq2(data,data.cl)
### TCC
res.list$TCC[[i]] <- my.tcc(data,data.cl,q=q)
### getting norm.factors
norm.factors <- res.list$TCC[[i]]$norm.factors
ef.libsizes <- colSums(data)*norm.factors
size.factors <- ef.libsizes/mean(ef.libsizes)
nf <- 1000000/colSums(data)
### MBCdeg
for(k in 1:length(k.list)){
res.list$MBCdeg1[[k]][[i]] <- my.mbcdeg(data,data.cl,k=k.list[k],q=q)
res.list$MBCdeg2[[k]][[i]] <- my.mbcdeg(data,data.cl,normalizer = log(size.factors),k=k.list[k],q=q)
res.list$MBCdeg3[[k]][[i]] <- my.mbcdeg(data,data.cl,normalizer = log(nf),k=k.list[k],q=q)
}
}
# DE analysis
## preparation
res.list <- list()
res.list$MBCdeg1 <- res.list$MBCdeg2 <- res.list$MBCdeg3 <- vector("list", length = length(k.list))
## main loop
N_trial <- 100
## main loop
N_trial <- 1
for (i in 1:N_trial){
print(i)
if (name == "tcc"){
data <- data.all[[name]][[i]]$count
data.cl <- data.all[[name]][[i]]$group$group
obj <- as.numeric(data.all[[name]][[i]]$simulation$trueDEG != 0)
}else if (name == "comp"){
data <- data.all[[name]][[i]]@count.matrix
data.cl <- data.all[[name]][[i]]@sample.annotations$condition
obj <- data.all[[name]][[i]]@variable.annotations$differential.expression
}else if (name == "pro"){
data <- data.all[[name]][[i]]$counts
data.cl <- data.all[[name]][[i]]$designs
obj <- rep(0,nrow(data))
for (d in data.all[[name]][[i]]$DEid){
obj[d] <- 1
}
}
### edgeR
res.list$edgeR[[i]] <- my.edger(data,data.cl)
### DESeq2
res.list$DESeq2[[i]] <- my.deseq2(data,data.cl)
### TCC
res.list$TCC[[i]] <- my.tcc(data,data.cl,q=q)
### getting norm.factors
norm.factors <- res.list$TCC[[i]]$norm.factors
ef.libsizes <- colSums(data)*norm.factors
size.factors <- ef.libsizes/mean(ef.libsizes)
nf <- 1000000/colSums(data)
### MBCdeg
for(k in 1:length(k.list)){
res.list$MBCdeg1[[k]][[i]] <- my.mbcdeg(data,data.cl,k=k.list[k],q=q)
res.list$MBCdeg2[[k]][[i]] <- my.mbcdeg(data,data.cl,normalizer = log(size.factors),k=k.list[k],q=q)
res.list$MBCdeg3[[k]][[i]] <- my.mbcdeg(data,data.cl,normalizer = log(nf),k=k.list[k],q=q)
}
}
# DE analysis
## preparation
res.list <- list()
res.list$MBCdeg1 <- res.list$MBCdeg2 <- res.list$MBCdeg3 <- vector("list", length = length(k.list))
## main loop
N_trial <- 3
for (i in 1:N_trial){
print(i)
if (name == "tcc"){
data <- data.all[[name]][[i]]$count
data.cl <- data.all[[name]][[i]]$group$group
obj <- as.numeric(data.all[[name]][[i]]$simulation$trueDEG != 0)
}else if (name == "comp"){
data <- data.all[[name]][[i]]@count.matrix
data.cl <- data.all[[name]][[i]]@sample.annotations$condition
obj <- data.all[[name]][[i]]@variable.annotations$differential.expression
}else if (name == "pro"){
data <- data.all[[name]][[i]]$counts
data.cl <- data.all[[name]][[i]]$designs
obj <- rep(0,nrow(data))
for (d in data.all[[name]][[i]]$DEid){
obj[d] <- 1
}
}
### edgeR
res.list$edgeR[[i]] <- my.edger(data,data.cl)
### DESeq2
res.list$DESeq2[[i]] <- my.deseq2(data,data.cl)
### TCC
res.list$TCC[[i]] <- my.tcc(data,data.cl,q=q)
### getting norm.factors
norm.factors <- res.list$TCC[[i]]$norm.factors
ef.libsizes <- colSums(data)*norm.factors
size.factors <- ef.libsizes/mean(ef.libsizes)
nf <- 1000000/colSums(data)
### MBCdeg
for(k in 1:length(k.list)){
res.list$MBCdeg1[[k]][[i]] <- my.mbcdeg(data,data.cl,k=k.list[k],q=q)
res.list$MBCdeg2[[k]][[i]] <- my.mbcdeg(data,data.cl,normalizer = log(size.factors),k=k.list[k],q=q)
res.list$MBCdeg3[[k]][[i]] <- my.mbcdeg(data,data.cl,normalizer = log(nf),k=k.list[k],q=q)
}
}
res.list$obj <- obj
names(res.list$MBCdeg1) <- names(res.list$MBCdeg2) <- names(res.list$MBCdeg3) <- paste("K",k.list,sep="")
# Output
out_f <- paste("res_2group_",name,"_",PDEG,"_",P1,"_n",n1,"_k.obj",sep="")
# Output
out_f <- paste("../res_2group_",name,"_",PDEG,"_",P1,"_n",n1,"_k.obj",sep="")
saveRDS(res.list,out_f)
# Output
out_f <- paste("../res_2group_",name,"_",PDEG,"_",P1,"_n",n1,".obj",sep="")
saveRDS(res.list,out_f)
